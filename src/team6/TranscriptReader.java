package team6;
/**
 * @author: Ryan Nitz
 */

import java.util.Scanner;
import java.util.ArrayList;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;


public class TranscriptReader{
	
	final static int ELEM_SIZE = 6;
      
	/**
	 * Gets the directory that has been specified in the config.txt file.
	 * @return dir - The directory to the cohort of transcripts.
	 */
	public static File getDirectory(){
		File path = new File("config.txt");
		File dir = null;
		Scanner sc = null;
		
		try {
			sc = new Scanner(path);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		String directoryPath;
		directoryPath = sc.nextLine();
		dir = new File(directoryPath);
		
        return dir;
	}
	
	/**
	 * Iterates through all of the transcript files in the specified location.
	 * Assigns the data within the rest of the system.
	 * @param transcriptSet The list of transcripts in the directory.
	 * @return Cohort - The cohort generated by all of the transcripts
	 * @throws IOException 
	 */
	public static Cohort parseTranscripts(File[] transcriptSet) throws IOException {
		ArrayList<String> gradeElements = new ArrayList<String>(ELEM_SIZE);
	    Scanner sc = null;
	    Cohort cohort = new Cohort(getDirectory().getAbsolutePath());
	    Equivalence e = new Equivalence();
	    
		for (File transcriptFile : transcriptSet) {
				
	    	try{
	    		sc = new Scanner(transcriptFile);
	    	}catch(FileNotFoundException f){
	    		f.printStackTrace();
	            System.out.println("Error opening file, skipping: " + transcriptFile.getName());
	        }
	    	
	    	Transcript transcript = new Transcript(transcriptFile.getName());
	    		
	        while(sc.hasNext()){
	        	String line = sc.nextLine();
	            line = line.trim();
	                
	            if(!line.isEmpty()) {
	            	gradeElements = getGradeElements(line);
	            	
	            	if(gradeElements != null) {
	            		
	            		if (e.hasEquivalence(gradeElements.get(0)) != gradeElements.get(0)) {
		            		gradeElements.set(0, e.hasEquivalence(gradeElements.get(0)));
		            	}
	            		
	            		Grade grade = new Grade(gradeElements);
		            	CourseList.addCourse(grade);
		            	cohort.addCourseToMaster(grade);
		            	transcript.addGrade(grade); 
	            	}
	            	  
	            }
	        }
	        
	        cohort.addTranscript(transcript);
	        System.out.println(transcript.toString());    
	        
		}	
		cohort.calculateCourseLevels();
		return cohort;	
	}
	
	/**
	 * Reads each of the lines in a transcript to extract the course/grade data.
	 * @param line - The line in the transcript file.
	 * @return ArrayList<String> - The set of data from the course/grade.
	 */
	public static ArrayList<String> getGradeElements(String line){
		ArrayList<String> elementSet = new ArrayList<String>(ELEM_SIZE);
        	
		for(int i = 0; i < ELEM_SIZE-1; i++){
			String element = line.substring(0, line.indexOf("  "));
       
			if(i == 4 && element.contains("#")) {
				return null;
			}
			
			if(i == 3 && element.length() == 4){
					//TODO: Mark what a no grade will be??
					elementSet.add("");
			}else{
					elementSet.add(element);
					line = line.substring(line.indexOf("  "), line.length()).trim();
			}
                
		}
        elementSet.add(line);//this picks up the rest of the line to avoid access string operations.       
		return elementSet;
	}
}